name: Container Workflow
on:
  push:
  workflow_dispatch:

env:
  ACR_LOGON_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/webapp
  IMAGE_NAME_LATEST_TAG: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:latest

jobs:
    build-deploy-image:
        
        runs-on: ubuntu-latest
        
        steps:

        - name: Set env
          run: |
            D="$(date '+%Y%m%d.%H%M')"
            echo "TAG=$(echo $D)" >> $GITHUB_ENV
        - name: Test 2
          run: echo $IMAGE_NAME_WITH_TAG
          env:
            IMAGE_NAME_WITH_TAG: ${{ env.IMAGE_NAME }}:${{ env.TAG }}


        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@master
          
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ env.ACR_LOGON_SERVER }}
            username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
            password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}

        - run: docker build . -t ${{ env.IMAGE_NAME_WITH_TAG }}
          env:
            IMAGE_NAME_WITH_TAG: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
        - run: docker push ${{ env.IMAGE_NAME_WITH_TAG }}
          env:
            IMAGE_NAME_WITH_TAG: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

        - run: docker build . -t ${{ env.IMAGE_NAME_LATEST_TAG }}
        - run: docker push ${{ env.IMAGE_NAME_LATEST_TAG }}


    deploy-to-aks:
      
      runs-on: ubuntu-latest
      
      if: github.ref == 'refs/heads/master'

      needs: build-deploy-image
          
      environment: PROD

      #env:
        #NAMESPACE: dummy
      
      steps:
      
      - uses: actions/checkout@main
      
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/aks-set-context@v4
        with:
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

    
      # Create namespace if doesn't exist
      # - run: |
      #    kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
      # Create image pull secret for ACR
      # - uses: azure/k8s-create-secret@v1
      #   with:
      #     container-registry-url: ${{ env.ACR_LOGON_SERVER }}
      #     container-registry-username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
      #     container-registry-password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
      #     secret-name: ${{ secrets.AKS_SECRET }}
      #     # namespace: ${{ env.NAMESPACE }}
    
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yml
            manifests/service.yml
          images: |
            ${{ env.IMAGE_NAME }}
          imagepullsecrets: |
            ${{ secrets.AKS_SECRET }}
          #namespace: ${{ env.NAMESPACE }}